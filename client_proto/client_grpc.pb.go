// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: voucher.proto

package client_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoucherVoucher is the voucher API for Voucher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoucherVoucher interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetByCPF(ctx context.Context, in *GetByCPFRequest, opts ...grpc.CallOption) (*GetByCPFResponse, error)
}

type voucherVoucher struct {
	cc grpc.VoucherConnInterface
}

func NewVoucherVoucher(cc grpc.VoucherConnInterface) VoucherVoucher {
	return &voucherVoucher{cc}
}

func (c *voucherVoucher) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/Voucher/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherVoucher) GetByID(ctx context.Context, in *GetByCPFRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, "/Voucher/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoucherServer is the server API for Voucher service.
// All implementations must embed UnimplementedVoucherServer
// for forward compatibility
type VoucherServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	mustEmbedUnimplementedVoucherServer()
}

// UnimplementedVoucherServer must be embedded to have forward compatible implementations.
type UnimplementedVoucherServer struct {
}

func (UnimplementedVoucherServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVoucherServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedVoucherServer) mustEmbedUnimplementedVoucherServer() {}

// UnsafeVoucherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoucherServer will
// result in compilation errors.
type UnsafeVoucherServer interface {
	mustEmbedUnimplementedVoucherServer()
}

func RegisterVoucherServer(s grpc.ServiceRegistrar, srv VoucherServer) {
	s.RegisterService(&Voucher_ServiceDesc, srv)
}

func _Voucher_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Voucher/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voucher_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Voucher/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Voucher_ServiceDesc is the grpc.ServiceDesc for Voucher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voucher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Voucher",
	HandlerType: (*VoucherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Voucher_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Voucher_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
